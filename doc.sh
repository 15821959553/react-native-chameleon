#!/usr/bin/env node

/**
 * This example script expects a JSON blob generated by react-docgen as input,
 * e.g. react-docgen components/* | doc.sh
 */

var fs = require('fs');
var generateMarkdown = require('./renderGenerator.js');
generateMarkdown = new generateMarkdown();
var path = require('path');

var json = '';
process.stdin.setEncoding('utf8');
process.stdin.on('readable', function() {
  var chunk = process.stdin.read();
  if (chunk !== null) {
    json += chunk;
  }
});

process.stdin.on('end', function() {
  buildDocs(JSON.parse(json));
});

function buildDocs(api) {
  // api is an object keyed by filepath. We use the file name as component name.
  mkdir('./doc');
  for (var filepath in api) {
    var name = getComponentName(filepath);
    var markdown = generateMarkdown.render(filepath, api[filepath],[]);
    fs.writeFileSync('./doc/'+name + '.md', markdown);
    process.stdout.write(filepath + ' -> ' + name + '.md\n');
  }
}

function getComponentName(filepath) {
  var name = path.basename(filepath);
  var ext;
  while ((ext = path.extname(name))) {
    name = name.substring(0, name.length - ext.length);
  }
  return name;
}


function mkdir(dirpath,dirname){
		//判断是否是第一次调用
		if(typeof dirname === "undefined"){
			if(fs.existsSync(dirpath)){
				return;
			}else{
				mkdir(dirpath,path.dirname(dirpath));
			}
		}else{
			//判断第二个参数是否正常，避免调用时传入错误参数
			if(dirname !== path.dirname(dirpath)){
				mkdir(dirpath);
				return;
			}
			if(fs.existsSync(dirname)){
				fs.mkdirSync(dirpath)
			}else{
				mkdir(dirname,path.dirname(dirname));
				fs.mkdirSync(dirpath);
			}
		}
}
